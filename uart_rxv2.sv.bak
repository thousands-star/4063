// uart_rx without DTR gating; automatically detects start bit on serial_rx low
module uart_rxv2 #(
  parameter int CLK_FREQ = 50_000_000,
  parameter int BAUD     = 100000
) (
  input  logic       clk,
  input  logic       serial_rx,
  output logic [7:0] data_out,
  output logic       data_valid
);

  localparam int BAUD_DIV = CLK_FREQ / BAUD;
  localparam int HALF_DIV = BAUD_DIV >> 1;

  typedef enum logic [1:0] { IDLE, START, DATA, STOP } state_t;
  state_t        state;
  logic [15:0]   baud_cnt;
  logic [2:0]    bit_cnt;

  // Shift register holds incoming bits
  logic [7:0]    rx_shift;
  // Latch holds last valid byte
  logic [7:0]    rx_latch;

  // Initialization flag
  logic          initialized;

  // Output reflects the latched value
  assign data_out = rx_latch;

  always_ff @(posedge clk) begin
    if (!initialized) begin
      state        <= IDLE;
      baud_cnt     <= 0;
      bit_cnt      <= 0;
      rx_shift     <= 8'd0;
      rx_latch     <= 8'd0;
      data_valid   <= 1'b0;
      initialized  <= 1'b1;
    end else begin
      // Default: clear valid each cycle
      data_valid <= 1'b0;

      case (state)
        IDLE: begin
          baud_cnt <= 0;
          bit_cnt  <= 0;
          // start bit detected when line goes low
          if (serial_rx == 1'b0) begin
            state    <= START;
            baud_cnt <= 1;
          end
        end

        START: begin
          if (baud_cnt == HALF_DIV) begin
            state    <= DATA;
            baud_cnt <= 1;
          end else begin
            baud_cnt <= baud_cnt + 1;
          end
        end

        DATA: begin
          if (baud_cnt == BAUD_DIV) begin
            baud_cnt          <= 1;
            rx_shift[bit_cnt] <= serial_rx;
            if (bit_cnt == 3'd7) begin
              bit_cnt <= 0;
              state   <= STOP;
            end else begin
              bit_cnt <= bit_cnt + 1;
            end
          end else begin
            baud_cnt <= baud_cnt + 1;
          end
        end

        STOP: begin
          if (baud_cnt == BAUD_DIV) begin
            baud_cnt   <= 0;
            // latch the received byte
            rx_latch   <= rx_shift;
            data_valid <= 1'b1;
            state      <= IDLE;
          end else begin
            baud_cnt <= baud_cnt + 1;
          end
        end

        default: state <= IDLE;
      endcase
    end
  end
endmodule

