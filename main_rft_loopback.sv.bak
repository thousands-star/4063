module main_rft_loopback (
    input  logic        CLOCK_50,
    input  logic [1:0]  KEY,
    input  logic [8:0]  SW,
    input  logic        serial_rx,
    input  logic        dtr_n,
    output logic [6:0]  HEX0,
    output logic [6:0]  HEX1,
    output logic [6:0]  HEX2,
    output logic [6:0]  HEX3,
    output logic [6:0]  HEX4,
    output logic [6:0]  HEX5,
    output logic [7:0]  LED,
    output logic        serial_tx
);

    // UART RX
    logic [7:0]  rx_data;
    logic        rx_valid;
    logic [15:0] recv_count;

    uart_rxv2 #(
        .CLK_FREQ(50_000_000),
        .BAUD(115200)
    ) u_rx (
        .clk        (CLOCK_50),
        .rst        (~KEY[0]),
        .serial_rx  (serial_rx),
        .data_out   (rx_data),
        .data_valid (rx_valid),
        .recv_count (recv_count)
    );

    // FIR Filter
    logic [7:0] filtered_data;
    logic       filtered_valid;

    fir_filter u_fir (
        .clk        (CLOCK_50),
        .rst        (~KEY[0]),
        .in_data    (rx_data),
        .in_valid   (rx_valid),
        .out_data   (filtered_data),
        .out_valid  (filtered_valid)
    );

    // UART TX
    logic tx_ready;
    logic tx_ready_prev;
    logic tx_valid;

    always_ff @(posedge CLOCK_50) begin
        tx_ready_prev <= tx_ready;
    end

    assign tx_valid = filtered_valid && SW[8]; // switch[8] enables transmission
    assign serial_tx = tx_valid && tx_ready ? filtered_data : 1'b1; // simplified transmit assignment

    uart_tx #(
        .CLK_FREQ(50_000_000),
        .BAUD(115200)
    ) u_tx (
        .clk        (CLOCK_50),
        .rst        (~KEY[0]),
        .tx_data    (filtered_data),
        .tx_valid   (tx_valid),
        .tx_ready   (tx_ready),
        .serial_tx  (serial_tx)
    );

    // 7-segment & LED Debug Info
    logic [23:0] display_val = {16'd0, filtered_data};

    logic [3:0] digit0, digit1, digit2, digit3, digit4, digit5;
    hex_display u_disp (
        .bin(display_val),
        .digit5(digit5),
        .digit4(digit4),
        .digit3(digit3),
        .digit2(digit2),
        .digit1(digit1),
        .digit0(digit0)
    );

    hex_decoder h0 (.bin(digit0), .seg(HEX0));
    hex_decoder h1 (.bin(digit1), .seg(HEX1));
    hex_decoder h2 (.bin(digit2), .seg(HEX2));
    hex_decoder h3 (.bin(digit3), .seg(HEX3));
    hex_decoder h4 (.bin(digit4), .seg(HEX4));
    hex_decoder h5 (.bin(4'd6),    .seg(HEX5));  // fixed mode display: 6 = RFT

    assign LED[0] = rx_valid;
    assign LED[1] = filtered_valid;
    assign LED[2] = tx_valid;
    assign LED[3] = tx_ready;
    assign LED[7:4] = 4'b0000;

endmodule
